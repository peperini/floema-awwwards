/*! For license information please see main.1c1b5ccc26a4c0051021.hot-update.js.LICENSE.txt */
"use strict";self.webpackHotUpdatefloema_awwwards("main",{"./app/components/Preloader.js":(e,t,s)=>{s.r(t),s.d(t,{default:()=>r});var n=s("./node_modules/ogl/src/core/Texture.js"),a=s("./node_modules/gsap/index.js"),o=s("./app/utils/text.js"),i=s("./app/classes/Component.js");class r extends i.default{constructor({canvas:e}){super({element:".preloader",elements:{title:".preloader__text",number:".preloader__number",numberText:".preloader__number__text"}}),this.canvas=e,window.TEXTURES={},(0,o.split)({element:this.elements.title,expression:"<br>"}),(0,o.split)({element:this.elements.title,expression:"<br>"}),this.elements.titleSpans=this.elements.title.querySelectorAll("span span"),this.length=0,this.createLoader()}createLoader(){window.ASSETS.forEach((e=>{const t=new n.Texture(this.canvas.gl,{generateMipmaps:!1}),s=new window.Image;s.crossOrigin="anonymous",s.src=e,s.onload=()=>{t.image=s,this.onAssetLoaded()},window.TEXTURES[e]=t}))}onAssetLoaded(e){this.length+=1;const t=this.length/window.ASSETS.length;this.elements.numberText.innerHTML=`${Math.round(100*t)}%`,1===t&&this.onLoaded()}onLoaded(){return new Promise((e=>{this.emit("completed"),this.animateOut=a.default.timeline({delay:1}),this.animateOut.to(this.elements.titleSpans,{duration:1.5,ease:"expo.out",stagger:.1,y:"100%"}),this.animateOut.to(this.elements.numberText,{duration:1.5,ease:"expo.out",stagger:.1,y:"100%"},"-=1.4"),this.animateOut.to(this.element,{autoAlpha:0,duration:1}),this.animateOut.call((()=>{this.destroy()}))}))}destroy(){this.element.parentNode.removeChild(this.element)}}}},(function(e){e.h=()=>"b0f2de8ef31c0042bf50"}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFpbi4xYzFiNWNjYzI2YTRjMDA1MTAyMS5ob3QtdXBkYXRlLmpzIiwibWFwcGluZ3MiOiI7cVJBT2UsTUFBTUEsVUFBa0JDLEVBQUFBLFFBQ25DQyxhQUFZLE9BQUVDLElBQ1ZDLE1BQU0sQ0FDRkMsUUFBUyxhQUNUQyxTQUFVLENBQ05DLE1BQU8sbUJBQ1BDLE9BQVEscUJBQ1JDLFdBQVksOEJBSXBCQyxLQUFLUCxPQUFTQSxFQUVkUSxPQUFPQyxTQUFXLENBQUMsR0FFbkJDLEVBQUFBLEVBQUFBLE9BQU0sQ0FDRlIsUUFBU0ssS0FBS0osU0FBU0MsTUFDdkJPLFdBQVksVUFHaEJELEVBQUFBLEVBQUFBLE9BQU0sQ0FDRlIsUUFBU0ssS0FBS0osU0FBU0MsTUFDdkJPLFdBQVksU0FHaEJKLEtBQUtKLFNBQVNTLFdBQWFMLEtBQUtKLFNBQVNDLE1BQU1TLGlCQUFpQixhQUVoRU4sS0FBS08sT0FBUyxFQUVkUCxLQUFLUSxjQUNULENBRUFBLGVBQ0lQLE9BQU9RLE9BQU9DLFNBQVFDLElBQ2xCLE1BQU1DLEVBQVUsSUFBSUMsRUFBQUEsUUFBUWIsS0FBS1AsT0FBT3FCLEdBQUksQ0FDeENDLGlCQUFpQixJQUdmQyxFQUFRLElBQUlmLE9BQU9nQixNQUV6QkQsRUFBTUUsWUFBYyxZQUNwQkYsRUFBTUcsSUFBTVIsRUFDWkssRUFBTUksT0FBUyxLQUNYUixFQUFRRCxNQUFRSyxFQUVoQmhCLEtBQUtxQixlQUFlLEVBR3hCcEIsT0FBT0MsU0FBU1MsR0FBU0MsQ0FBTyxHQUV4QyxDQUVBUyxjQUFlVixHQUNYWCxLQUFLTyxRQUFVLEVBRWYsTUFBTWUsRUFBVXRCLEtBQUtPLE9BQVNOLE9BQU9RLE9BQU9GLE9BRTVDUCxLQUFLSixTQUFTRyxXQUFXd0IsVUFBYSxHQUFFQyxLQUFLQyxNQUFnQixJQUFWSCxNQUVuQyxJQUFaQSxHQUNBdEIsS0FBSzBCLFVBRWIsQ0FFQUEsV0FDSSxPQUFPLElBQUlDLFNBQVFDLElBQ2Y1QixLQUFLNkIsS0FBSyxhQUVWN0IsS0FBSzhCLFdBQWFDLEVBQUFBLFFBQUtDLFNBQVMsQ0FDNUJDLE1BQU8sSUFHWGpDLEtBQUs4QixXQUFXSSxHQUFHbEMsS0FBS0osU0FBU1MsV0FBWSxDQUN6QzhCLFNBQVUsSUFDVkMsS0FBTSxXQUNOQyxRQUFTLEdBQ1RDLEVBQUcsU0FJUHRDLEtBQUs4QixXQUFXSSxHQUFHbEMsS0FBS0osU0FBU0csV0FBWSxDQUN6Q29DLFNBQVUsSUFDVkMsS0FBTSxXQUNOQyxRQUFTLEdBQ1RDLEVBQUcsUUFFSixTQUVIdEMsS0FBSzhCLFdBQVdJLEdBQUdsQyxLQUFLTCxRQUFTLENBQzdCNEMsVUFBVyxFQUNYSixTQUFVLElBR2RuQyxLQUFLOEIsV0FBV1UsTUFBSyxLQUNqQnhDLEtBQUt5QyxTQUFTLEdBQ2hCLEdBRVYsQ0FFQUEsVUFDSXpDLEtBQUtMLFFBQVErQyxXQUFXQyxZQUFZM0MsS0FBS0wsUUFDN0Msa0JDNUdKaUQsRUFBb0JDLEVBQUksSUFBTSIsInNvdXJjZXMiOlsid2VicGFjazovL2Zsb2VtYS1hd3d3YXJkcy8uL2FwcC9jb21wb25lbnRzL1ByZWxvYWRlci5qcyIsIndlYnBhY2s6Ly9mbG9lbWEtYXd3d2FyZHMvd2VicGFjay9ydW50aW1lL2dldEZ1bGxIYXNoIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFRleHR1cmUgfSBmcm9tICdvZ2wnXG5pbXBvcnQgR1NBUCBmcm9tICdnc2FwJ1xuaW1wb3J0IHsgc3BsaXQgfSBmcm9tICd1dGlscy90ZXh0J1xuXG5pbXBvcnQgQ29tcG9uZW50IGZyb20gXCJjbGFzc2VzL0NvbXBvbmVudFwiXG5cblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgUHJlbG9hZGVyIGV4dGVuZHMgQ29tcG9uZW50IHtcbiAgICBjb25zdHJ1Y3Rvcih7IGNhbnZhcyB9KSB7XG4gICAgICAgIHN1cGVyKHtcbiAgICAgICAgICAgIGVsZW1lbnQ6ICcucHJlbG9hZGVyJyxcbiAgICAgICAgICAgIGVsZW1lbnRzOiB7XG4gICAgICAgICAgICAgICAgdGl0bGU6ICcucHJlbG9hZGVyX190ZXh0JyxcbiAgICAgICAgICAgICAgICBudW1iZXI6ICcucHJlbG9hZGVyX19udW1iZXInLFxuICAgICAgICAgICAgICAgIG51bWJlclRleHQ6ICcucHJlbG9hZGVyX19udW1iZXJfX3RleHQnXG4gICAgICAgICAgICB9XG4gICAgICAgIH0pXG5cbiAgICAgICAgdGhpcy5jYW52YXMgPSBjYW52YXNcblxuICAgICAgICB3aW5kb3cuVEVYVFVSRVMgPSB7fVxuXG4gICAgICAgIHNwbGl0KHtcbiAgICAgICAgICAgIGVsZW1lbnQ6IHRoaXMuZWxlbWVudHMudGl0bGUsXG4gICAgICAgICAgICBleHByZXNzaW9uOiAnPGJyPidcbiAgICAgICAgfSlcblxuICAgICAgICBzcGxpdCh7XG4gICAgICAgICAgICBlbGVtZW50OiB0aGlzLmVsZW1lbnRzLnRpdGxlLFxuICAgICAgICAgICAgZXhwcmVzc2lvbjogJzxicj4nXG4gICAgICAgIH0pXG5cbiAgICAgICAgdGhpcy5lbGVtZW50cy50aXRsZVNwYW5zID0gdGhpcy5lbGVtZW50cy50aXRsZS5xdWVyeVNlbGVjdG9yQWxsKCdzcGFuIHNwYW4nKVxuXG4gICAgICAgIHRoaXMubGVuZ3RoID0gMDtcblxuICAgICAgICB0aGlzLmNyZWF0ZUxvYWRlcigpXG4gICAgfVxuXG4gICAgY3JlYXRlTG9hZGVyICgpIHtcbiAgICAgICAgd2luZG93LkFTU0VUUy5mb3JFYWNoKGltYWdlID0+IHtcbiAgICAgICAgICAgIGNvbnN0IHRleHR1cmUgPSBuZXcgVGV4dHVyZSh0aGlzLmNhbnZhcy5nbCwge1xuICAgICAgICAgICAgICAgIGdlbmVyYXRlTWlwbWFwczogZmFsc2UsXG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgXG4gICAgICAgICAgICBjb25zdCBtZWRpYSA9IG5ldyB3aW5kb3cuSW1hZ2UoKVxuXG4gICAgICAgICAgICBtZWRpYS5jcm9zc09yaWdpbiA9ICdhbm9ueW1vdXMnXG4gICAgICAgICAgICBtZWRpYS5zcmMgPSBpbWFnZVxuICAgICAgICAgICAgbWVkaWEub25sb2FkID0gKCkgPT4ge1xuICAgICAgICAgICAgICAgIHRleHR1cmUuaW1hZ2UgPSBtZWRpYVxuXG4gICAgICAgICAgICAgICAgdGhpcy5vbkFzc2V0TG9hZGVkKClcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIFxuICAgICAgICAgICAgd2luZG93LlRFWFRVUkVTW2ltYWdlXSA9IHRleHR1cmVcbiAgICAgICAgfSlcbiAgICB9XG5cbiAgICBvbkFzc2V0TG9hZGVkIChpbWFnZSkge1xuICAgICAgICB0aGlzLmxlbmd0aCArPSAxXG5cbiAgICAgICAgY29uc3QgcGVyY2VudCA9IHRoaXMubGVuZ3RoIC8gd2luZG93LkFTU0VUUy5sZW5ndGhcblxuICAgICAgICB0aGlzLmVsZW1lbnRzLm51bWJlclRleHQuaW5uZXJIVE1MID0gYCR7TWF0aC5yb3VuZChwZXJjZW50ICogMTAwKX0lYFxuXG4gICAgICAgIGlmIChwZXJjZW50ID09PSAxKSB7XG4gICAgICAgICAgICB0aGlzLm9uTG9hZGVkKClcbiAgICAgICAgfVxuICAgIH1cblxuICAgIG9uTG9hZGVkICgpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKHJlc29sdmUgPT4ge1xuICAgICAgICAgICAgdGhpcy5lbWl0KCdjb21wbGV0ZWQnKVxuXG4gICAgICAgICAgICB0aGlzLmFuaW1hdGVPdXQgPSBHU0FQLnRpbWVsaW5lKHtcbiAgICAgICAgICAgICAgICBkZWxheTogMVxuICAgICAgICAgICAgfSlcblxuICAgICAgICAgICAgdGhpcy5hbmltYXRlT3V0LnRvKHRoaXMuZWxlbWVudHMudGl0bGVTcGFucywge1xuICAgICAgICAgICAgICAgIGR1cmF0aW9uOiAxLjUsXG4gICAgICAgICAgICAgICAgZWFzZTogJ2V4cG8ub3V0JyxcbiAgICAgICAgICAgICAgICBzdGFnZ2VyOiAwLjEsXG4gICAgICAgICAgICAgICAgeTogJzEwMCUnLFxuXG4gICAgICAgICAgICB9KVxuXG4gICAgICAgICAgICB0aGlzLmFuaW1hdGVPdXQudG8odGhpcy5lbGVtZW50cy5udW1iZXJUZXh0LCB7XG4gICAgICAgICAgICAgICAgZHVyYXRpb246IDEuNSxcbiAgICAgICAgICAgICAgICBlYXNlOiAnZXhwby5vdXQnLFxuICAgICAgICAgICAgICAgIHN0YWdnZXI6IDAuMSxcbiAgICAgICAgICAgICAgICB5OiAnMTAwJScsXG5cbiAgICAgICAgICAgIH0sICctPTEuNCcpXG5cbiAgICAgICAgICAgIHRoaXMuYW5pbWF0ZU91dC50byh0aGlzLmVsZW1lbnQsIHtcbiAgICAgICAgICAgICAgICBhdXRvQWxwaGE6IDAsXG4gICAgICAgICAgICAgICAgZHVyYXRpb246IDEsXG4gICAgICAgICAgICB9KVxuXG4gICAgICAgICAgICB0aGlzLmFuaW1hdGVPdXQuY2FsbCgoKSA9PiB7XG4gICAgICAgICAgICAgICAgdGhpcy5kZXN0cm95KClcbiAgICAgICAgICAgIH0pXG4gICAgICAgIH0pXG4gICAgfVxuXG4gICAgZGVzdHJveSAoKSB7XG4gICAgICAgIHRoaXMuZWxlbWVudC5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKHRoaXMuZWxlbWVudClcbiAgICB9XG59IiwiX193ZWJwYWNrX3JlcXVpcmVfXy5oID0gKCkgPT4gKFwiYjBmMmRlOGVmMzFjMDA0MmJmNTBcIikiXSwibmFtZXMiOlsiUHJlbG9hZGVyIiwiQ29tcG9uZW50IiwiY29uc3RydWN0b3IiLCJjYW52YXMiLCJzdXBlciIsImVsZW1lbnQiLCJlbGVtZW50cyIsInRpdGxlIiwibnVtYmVyIiwibnVtYmVyVGV4dCIsInRoaXMiLCJ3aW5kb3ciLCJURVhUVVJFUyIsInNwbGl0IiwiZXhwcmVzc2lvbiIsInRpdGxlU3BhbnMiLCJxdWVyeVNlbGVjdG9yQWxsIiwibGVuZ3RoIiwiY3JlYXRlTG9hZGVyIiwiQVNTRVRTIiwiZm9yRWFjaCIsImltYWdlIiwidGV4dHVyZSIsIlRleHR1cmUiLCJnbCIsImdlbmVyYXRlTWlwbWFwcyIsIm1lZGlhIiwiSW1hZ2UiLCJjcm9zc09yaWdpbiIsInNyYyIsIm9ubG9hZCIsIm9uQXNzZXRMb2FkZWQiLCJwZXJjZW50IiwiaW5uZXJIVE1MIiwiTWF0aCIsInJvdW5kIiwib25Mb2FkZWQiLCJQcm9taXNlIiwicmVzb2x2ZSIsImVtaXQiLCJhbmltYXRlT3V0IiwiR1NBUCIsInRpbWVsaW5lIiwiZGVsYXkiLCJ0byIsImR1cmF0aW9uIiwiZWFzZSIsInN0YWdnZXIiLCJ5IiwiYXV0b0FscGhhIiwiY2FsbCIsImRlc3Ryb3kiLCJwYXJlbnROb2RlIiwicmVtb3ZlQ2hpbGQiLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwiaCJdLCJzb3VyY2VSb290IjoiIn0=